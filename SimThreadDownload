package com.rs.multdownload;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.RandomAccessFile;
import java.net.HttpURLConnection;
import java.net.ProtocolException;
import java.net.URL;

public class SimThreadDownload extends Thread {

	private long start;
	private long end;
	private URL url;
	private long totalLen;
	private File target;

	public SimThreadDownload(long start, long end, URL url, long totalLen,
			File target) {
		super();
		this.start = start;
		this.end = end;
		this.url = url;
		this.totalLen = totalLen;
		this.target = target;
	}

	@Override
	public void run() {
		HttpURLConnection conn = null;
		InputStream is = null;
		RandomAccessFile raf = null;
		try {
			// 获取链接地址
			conn = (HttpURLConnection) url.openConnection();
			// 设置请求属性跟时间
			conn.setRequestMethod("GET");
			conn.setReadTimeout(1000 * 5);

			if (totalLen > 0)
				conn.setRequestProperty("Range", "bytes=" + start + "-" + end);
			is = conn.getInputStream();
			raf = new RandomAccessFile(target, "rwd");
			copy(is, raf);
		} catch (ProtocolException e) {
			e.printStackTrace();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (conn != null) {
				conn.disconnect();
			}
			if (raf != null) {
				try {
					raf.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			if (is != null) {
				try {
					is.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}

	private void copy(InputStream is, RandomAccessFile raf) throws IOException {
		byte[] buf = new byte[1024 * 1024 * 10];
		int len = -1;
		raf.seek(start);
		while ((len = is.read(buf)) != -1) {
			raf.write(buf, 0, len);
		}
	}
}
